{"ast":null,"code":"import { createSlice, createAsyncThunk } from '@reduxjs/toolkit';\nimport axios from 'axios';\nconst API_BASE_URL = 'https://backend-production-da28.up.railway.app';\n\n// Fetch profiles with pagination\nexport const fetchProfiles = createAsyncThunk('users/fetchProfiles', async page => {\n  const limit = 4;\n  const offset = (page - 1) * limit;\n  const response = await axios.get(`${API_BASE_URL}/getProfiles?limit=${limit}&offset=${offset}`);\n  return response.data; // Assuming this response includes profiles and total count\n});\n\n// Sort profiles\nexport const sortProfiles = createAsyncThunk('users/sortProfiles', async () => {\n  const response = await axios.get(`${API_BASE_URL}/sort`);\n  return response.data; // Assuming this response includes sorted profiles\n});\n\n// Add a new profile\nexport const addProfile = createAsyncThunk('users/addProfile', async newProfile => {\n  const response = await axios.post(`${API_BASE_URL}/createProfile`, newProfile);\n  return response.data; // Ensure the response contains the created profile\n});\nconst userSlice = createSlice({\n  name: 'users',\n  initialState: {\n    profiles: [],\n    status: 'loading',\n    error: null,\n    currentPage: 1,\n    totalPages: 1 // Initial total pages\n  },\n  reducers: {\n    setCurrentPage: (state, action) => {\n      state.currentPage = action.payload;\n    }\n  },\n  extraReducers: builder => {\n    builder.addCase(fetchProfiles.pending, state => {\n      state.status = 'loading';\n    }).addCase(fetchProfiles.fulfilled, (state, action) => {\n      state.status = 'succeeded';\n      state.profiles = action.payload.profiles; // Assuming response has a `profiles` field\n      state.totalPages = Math.ceil(action.payload.totalCount / 4); // Assuming response has a `totalCount` field\n    }).addCase(fetchProfiles.rejected, (state, action) => {\n      state.status = 'failed';\n      state.error = action.error.message;\n    }).addCase(sortProfiles.pending, state => {\n      state.status = 'loading';\n    }).addCase(sortProfiles.fulfilled, (state, action) => {\n      state.status = 'succeeded';\n      state.profiles = action.payload; // Assuming response has sorted profiles\n      state.currentPage = 1; // Reset to first page after sorting\n    }).addCase(sortProfiles.rejected, (state, action) => {\n      state.status = 'failed';\n      state.error = action.error.message;\n    }).addCase(addProfile.pending, state => {\n      state.status = 'loading';\n    }).addCase(addProfile.fulfilled, (state, action) => {\n      state.status = 'succeeded';\n      state.profiles.push(action.payload); // Add the new profile to the list\n    }).addCase(addProfile.rejected, (state, action) => {\n      state.status = 'failed';\n      state.error = action.error.message;\n    });\n  }\n});\nexport const {\n  setCurrentPage\n} = userSlice.actions;\nexport default userSlice.reducer;","map":{"version":3,"names":["createSlice","createAsyncThunk","axios","API_BASE_URL","fetchProfiles","page","limit","offset","response","get","data","sortProfiles","addProfile","newProfile","post","userSlice","name","initialState","profiles","status","error","currentPage","totalPages","reducers","setCurrentPage","state","action","payload","extraReducers","builder","addCase","pending","fulfilled","Math","ceil","totalCount","rejected","message","push","actions","reducer"],"sources":["/home/balakrishna/Downloads/JOB/nxtProjects/goForMeet/user-profile-app/src/features/userSlice.js"],"sourcesContent":["import { createSlice, createAsyncThunk } from '@reduxjs/toolkit';\nimport axios from 'axios';\n\nconst API_BASE_URL = 'https://backend-production-da28.up.railway.app';\n\n// Fetch profiles with pagination\nexport const fetchProfiles = createAsyncThunk('users/fetchProfiles', async (page) => {\n    const limit = 4;\n    const offset = (page - 1) * limit;\n    const response = await axios.get(`${API_BASE_URL}/getProfiles?limit=${limit}&offset=${offset}`);\n    return response.data; // Assuming this response includes profiles and total count\n});\n\n// Sort profiles\nexport const sortProfiles = createAsyncThunk('users/sortProfiles', async () => {\n    const response = await axios.get(`${API_BASE_URL}/sort`);\n    return response.data; // Assuming this response includes sorted profiles\n});\n\n// Add a new profile\nexport const addProfile = createAsyncThunk('users/addProfile', async (newProfile) => {\n    const response = await axios.post(`${API_BASE_URL}/createProfile`, newProfile);\n    return response.data; // Ensure the response contains the created profile\n});\n\nconst userSlice = createSlice({\n    name: 'users',\n    initialState: {\n        profiles: [],\n        status: 'loading',\n        error: null,\n        currentPage: 1,\n        totalPages: 1, // Initial total pages\n    },\n    reducers: {\n        setCurrentPage: (state, action) => {\n            state.currentPage = action.payload;\n        },\n    },\n    extraReducers: (builder) => {\n        builder\n            .addCase(fetchProfiles.pending, (state) => {\n                state.status = 'loading';\n            })\n            .addCase(fetchProfiles.fulfilled, (state, action) => {\n                state.status = 'succeeded';\n                state.profiles = action.payload.profiles; // Assuming response has a `profiles` field\n                state.totalPages = Math.ceil(action.payload.totalCount / 4); // Assuming response has a `totalCount` field\n            })\n            .addCase(fetchProfiles.rejected, (state, action) => {\n                state.status = 'failed';\n                state.error = action.error.message;\n            })\n            .addCase(sortProfiles.pending, (state) => {\n                state.status = 'loading';\n            })\n            .addCase(sortProfiles.fulfilled, (state, action) => {\n                state.status = 'succeeded';\n                state.profiles = action.payload; // Assuming response has sorted profiles\n                state.currentPage = 1; // Reset to first page after sorting\n            })\n            .addCase(sortProfiles.rejected, (state, action) => {\n                state.status = 'failed';\n                state.error = action.error.message;\n            })\n            .addCase(addProfile.pending, (state) => {\n                state.status = 'loading';\n            })\n            .addCase(addProfile.fulfilled, (state, action) => {\n                state.status = 'succeeded';\n                state.profiles.push(action.payload); // Add the new profile to the list\n            })\n            .addCase(addProfile.rejected, (state, action) => {\n                state.status = 'failed';\n                state.error = action.error.message;\n            });\n    },\n});\n\nexport const { setCurrentPage } = userSlice.actions;\n\nexport default userSlice.reducer;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}